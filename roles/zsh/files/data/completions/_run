#compdef run

# Place this file in a directory in your fpath (e.g., ~/.zsh/completions/)
# Then add: autoload -Uz compinit && compinit

_run() {
  local curcontext="$curcontext" state line ret=1
  local -a makefile_targets

  # Find the nearest Makefile
  local dir="$PWD"
  local makefile=""
  
  while [[ "$dir" != "/" ]]; do
    if [[ -f "$dir/Makefile" ]]; then
      makefile="$dir/Makefile"
      break
    elif [[ -f "$dir/makefile" ]]; then
      makefile="$dir/makefile"
      break
    fi
    dir=$(dirname "$dir")
  done

  # If a Makefile is found, extract targets and their descriptions
  if [[ -n "$makefile" ]]; then
    # Read the Makefile line by line
    local target=""
    local description=""
    
    # Read Makefile into array using zsh syntax
    local -a lines
    lines=("${(@f)$(< "$makefile")}")
    
    for ((i=1; i<=${#lines}; i++)); do
      local line="${lines[$i]}"
      
      # Match target lines (pattern: "target:")
      if [[ "$line" =~ ^([a-zA-Z0-9_/-]+): ]]; then
        # Save previous target if there was one
        if [[ -n "$target" && -n "$description" ]]; then
          makefile_targets+=("$target:$description")
        fi
        
        # Set new target
        target="${match[1]}"
        
        # Check for inline echo command that might contain a description
        if [[ "$line" =~ '@echo[[:space:]]+"([^"]*)"' ]]; then
          description="${match[1]}"
        else
          # Look ahead to the next line for an echo description
          if ((i < ${#lines})); then
            local next_line="${lines[$i+1]}"
            if [[ "$next_line" =~ '[[:space:]]*@echo[[:space:]]+"([^"]*)"' ]]; then
              description="${match[1]}"
            else
              description=""
            fi
          fi
        fi
      fi
    done
    
    # Add the last target
    if [[ -n "$target" && -n "$description" ]]; then
      makefile_targets+=("$target:$description")
    fi
    
    # Format targets for display
    local -a formatted_targets
    for item in "${makefile_targets[@]}"; do
      local tgt=${item%%:*}
      local desc=${item#*:}
      formatted_targets+=("$tgt:$desc")
    done
    
    _describe -t targets 'make targets' formatted_targets && ret=0
  else
    # If no Makefile is found, return empty completions
    _message "No Makefile found in this directory or parent directories"
  fi

  return ret
}

_run "$@"
