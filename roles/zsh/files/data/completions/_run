#compdef run
# Place this file in a directory in your fpath (e.g., ~/.zsh/completions/)
# Then add: autoload -Uz compinit && compinit
_run() {
  local curcontext="$curcontext" state line ret=1
  local -a makefile_targets formatted_targets
  
  # Find the nearest Makefile
  local dir="$PWD"
  local makefile=""
  
  while [[ "$dir" != "/" ]]; do
    if [[ -f "$dir/Makefile" ]]; then
      makefile="$dir/Makefile"
      break
    elif [[ -f "$dir/makefile" ]]; then
      makefile="$dir/makefile"
      break
    fi
    dir=$(dirname "$dir")
  done
  
  # If a Makefile is found, extract targets
  if [[ -n "$makefile" ]]; then
    # Get all targets from Makefile
    local -a all_targets
    all_targets=($(grep -E '^[a-zA-Z0-9_/-]+:' "$makefile" | sed 's/:.*//' | sort -u))
    
    # For each target, look for a description
    for target in "${all_targets[@]}"; do
      # Look for echo lines immediately after the target in the Makefile
      description=""
      
      # First check for inline echo in the target line
      if grep -qE "^${target}:.*@echo[[:space:]]+\"[^\"]*\"" "$makefile"; then
        description=$(grep -E "^${target}:.*@echo[[:space:]]+\"([^\"]*)\"" "$makefile" | sed -E 's/^.*@echo[[:space:]]+"([^"]*)".*$/\1/')
      else
        # Check for echo in the lines immediately following the target definition
        local target_line=$(grep -n "^${target}:" "$makefile" | cut -d: -f1)
        if [[ -n "$target_line" ]]; then
          local next_line=$((target_line + 1))
          local next_line_content=$(sed -n "${next_line}p" "$makefile")
          
          if [[ "$next_line_content" =~ '[[:space:]]*@echo[[:space:]]+"([^"]*)"' ]]; then
            description=$(echo "$next_line_content" | sed -E 's/^[[:space:]]*@echo[[:space:]]+"([^"]*)".*$/\1/')
          fi
        fi
      fi
      
      # Add the target to our list (with description if available)
      if [[ -n "$description" ]]; then
        formatted_targets+=("$target:$description")
      else
        formatted_targets+=("$target:")
      fi
    done
    
    _describe -t targets 'make targets' formatted_targets && ret=0
  else
    # If no Makefile is found, return empty completions
    _message "No Makefile found in this directory or parent directories"
  fi
  
  return ret
}
_run "$@"
