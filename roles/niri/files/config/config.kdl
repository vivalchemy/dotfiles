input {
// Window rules let you adjust behavior for individual windows.
  keyboard {
    xkb {
    }
  }

  touchpad {
    // off
    tap
    // dwt
    // dwtp
    // drag false
    // drag-lock
    natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "two-finger"
    // disabled-on-external-mouse
  }

  mouse {
    // off
    natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "no-scroll"
  }

  trackpoint {
    // off
    natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "on-button-down"
    // scroll-button 273
    // scroll-button-lock
    // middle-emulation
  }

  // Uncomment this to make the mouse warp to the center of newly focused windows.
  warp-mouse-to-focus

  // Focus windows and outputs automatically when moving the mouse into them.
  // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
  focus-follows-mouse max-scroll-amount="10%"
}

cursor {
  xcursor-theme "Bibata-Modern-Ice"
  xcursor-size 24
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "eDP-1" {
  // Uncomment this line to disable this output.
  // off

  // Resolution and, optionally, refresh rate of the output.
  // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
  // If the refresh rate is omitted, niri will pick the highest refresh rate
  // for the resolution.
  // If the mode is omitted altogether or is invalid, niri will pick one automatically.
  // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
  mode "1920x1080@60.05200"

  // You can use integer or fractional scale, for example use 1.5 for 150% scale.
  scale 1.5

  // Transform allows to rotate the output counter-clockwise, valid values are:
  // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
  transform "normal"

  // Position of the output in the global coordinate space.
  // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
  // The cursor can only move between directly adjacent outputs.
  // Output scale and rotation has to be taken into account for positioning:
  // outputs are sized in logical, or scaled, pixels.
  // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
  // so to put another output directly adjacent to it on the right, set its x to 1920.
  // If the position is unset or results in an overlap, the output is instead placed
  // automatically.
  // position x=1280 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
  // Set gaps around windows in logical pixels.
  gaps 0

  // When to center a column when changing focus, options are:
  // - "never", default behavior, focusing an off-screen column will keep at the left
  //   or right edge of the screen.
  // - "always", the focused column will always be centered.
  // - "on-overflow", focusing a column will center it if it doesn't fit
  //   together with the previously focused column.
  center-focused-column "never"

  // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
  preset-column-widths {
    // Proportion sets the width as a fraction of the output width, taking gaps into account.
    // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
    // The default preset widths are 1/3, 1/2 and 2/3 of the output.
    proportion 0.33333
    proportion 0.5
    proportion 0.66667

    // Fixed sets the width in logical pixels exactly.
    // fixed 1920
  }

  // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
  // preset-window-heights { }

  // You can change the default width of the new windows.
  default-column-width { proportion 0.5; }
  // If you leave the brackets empty, the windows themselves will decide their initial width.
  // default-column-width {}

  // By default focus ring and border are rendered as a solid background rectangle
  // behind windows. That is, they will show up through semitransparent windows.
  // This is because windows using client-side decorations can have an arbitrary shape.
  //
  // If you don't like that, you should uncomment `prefer-no-csd` below.
  // Niri will draw focus ring and border *around* windows that agree to omit their
  // client-side decorations.
  //
  // Alternatively, you can override it with a window rule called
  // `draw-border-with-background`.

  // You can change how the focus ring looks.
  focus-ring {
    // Uncomment this line to disable the focus ring.
    off

    // How many logical pixels the ring extends out from the windows.
    width 4

    // Colors can be set in a variety of ways:
    // - CSS named colors: "red"
    // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
    // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

    // Color of the ring on the active monitor.
    active-color "#7fc8ff"

    // Color of the ring on inactive monitors.
    //
    // The focus ring only draws around the active window, so the only place
    // where you can see its inactive-color is on other monitors.
    inactive-color "#505050"

    // You can also use gradients. They take precedence over solid colors.
    // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
    // The angle is the same as in linear-gradient, and is optional,
    // defaulting to 180 (top-to-bottom gradient).
    // You can use any CSS linear-gradient tool on the web to set these up.
    // Changing the color space is also supported, check the wiki for more info.
    //
    // active-gradient from="#80c8ff" to="#c7ff7f" angle=45

    // You can also color the gradient relative to the entire view
    // of the workspace, rather than relative to just the window itself.
    // To do that, set relative-to="workspace-view".
    //
    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
  }

  // You can also add a border. It's similar to the focus ring, but always visible.
  border {
    // The settings are the same as for the focus ring.
    // If you enable the border, you probably want to disable the focus ring.
    // off

    width 0
    active-color "#ffc87f"
    inactive-color "#505050"

    // Color of the border around windows that request your attention.
    urgent-color "#9b0000"

    // Gradients can use a few different interpolation color spaces.
    // For example, this is a pastel rainbow gradient via in="oklch longer hue".
    //
    // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
  }

  // You can enable drop shadows for windows.
  shadow {
    // Uncomment the next line to enable shadows.
    on

    // By default, the shadow draws only around its window, and not behind it.
    // Uncomment this setting to make the shadow draw behind its window.
    //
    // Note that niri has no way of knowing about the CSD window corner
    // radius. It has to assume that windows have square corners, leading to
    // shadow artifacts inside the CSD rounded corners. This setting fixes
    // those artifacts.
    //
    // However, instead you may want to set prefer-no-csd and/or
    // geometry-corner-radius. Then, niri will know the corner radius and
    // draw the shadow correctly, without having to draw it behind the
    // window. These will also remove client-side shadows if the window
    // draws any.
    //
    // draw-behind-window true

    // You can change how shadows look. The values below are in logical
    // pixels and match the CSS box-shadow properties.

    // Softness controls the shadow blur radius.
    softness 30

    // Spread expands the shadow.
    spread 5

    // Offset moves the shadow relative to the window.
    offset x=0 y=5

    // You can also change the shadow color and opacity.
    color "#0009"
  }

  // Struts shrink the area occupied by windows, similarly to layer-shell panels.
  // You can think of them as a kind of outer gaps. They are set in logical pixels.
  // Left and right struts will cause the next window to the side to always be visible.
  // Top and bottom struts will simply add outer gaps in addition to the area occupied by
  // layer-shell panels and regular gaps.
  struts {
    // left 64
    // right 64
    // top 64
    // bottom 64
  }
}

environment {
  // XDG base dirs
  XDG_CONFIG_HOME "/home/shadow/.config"
  XDG_CACHE_HOME "/home/shadow/.cache"

  XDG_DATA_HOME "/home/shadow/.local/share"
  XDG_STATE_HOME "/home/shadow/.local/state"

  XDG_CURRENT_DESKTOP "Hyprland"

  // XDG user dirs
  XDG_DESKTOP_DIR "/home/shadow/Desktop"
  XDG_DOCUMENTS_DIR "/home/shadow/Documents"
  XDG_DOWNLOAD_DIR "/home/shadow/Downloads"
  XDG_MUSIC_DIR "/home/shadow/Music"
  XDG_PICTURES_DIR "/home/shadow/Pictures"
  XDG_PUBLICSHARE_DIR "/home/shadow/Public"
  XDG_VIDEOS_DIR "/home/shadow/Videos"
  
  // Theming
  HYPRCURSOR_THEME "Bibata-Modern-Ice"
  HYPRCURSOR_SIZE "24"
  XCURSOR_THEME "Bibata-Modern-Ice"
  XCURSOR_SIZE "24"
  QT_QPA_PLATFORMTHEME "qt5ct"
  GTK_THEME "Adwaita:dark"
  // env = GTK2_RC_FILES,/usr/share/themes/Adwaita-dark/gtk-2.0/gtkrc
  QT_STYLE_OVERRIDE "adwaita-dark"

  // Application specific envs
  CARGO_HOME "/home/shadow/.local/share/cargo" // rust
  RUSTUP_HOME "/home/shadow/.local/share/rustup" // rust
  GNUPGHOME "/home/shadow/.local/share/gnupg" // default
  ZDOTDIR "/home/shadow/.config/zsh" // zsh
  NPM_CONFIG_USERCONFIG "/home/shadow/.config/npm/npmrc" // npm
  NODE_REPL_HISTORY "/home/shadow/.local/share/node_repl_history" // npm
  
  // Docker
  DOCKER_CONFIG "/home/shadow/.config/docker"

  // Jupyter
  JUPYTER_PLATFORM_DIRS "true"

  // Kubernetes
  KUBECONFIG "/home/shadow/.config/kube"
  KUBECACHEDIR "/home/shadow/.cache/kube"
  MINIKUBE_HOME "/home/shadow/.local/share/minikube"
  
  // Ollama
  OLLAMA_MODELS "/home/shadow/.local/share/ollama/models"

  // Go
  GOPATH "/home/shadow/.local/share/go"
  GOMODCACHE "/home/shadow/.cache/go/mod"

  // Python
  PYTHON_HISTORY "/home/shadow/.local/state/python/history"
  PYTHONPYCACHEPREFIX "/home/shadow/.cache/python"
  PYTHONUSERBASE "$XDG_DATA_HOME/python"
  
  // Flutter
  ANDROID_HOME "/home/shadow/android-sdk"
  // PATH "$PATH:/home/shadow/android-sdk/platform-tools"
  CHROME_EXECUTABLE "/usr/bin/vivaldi"
  //
  // EDITOR
  EDITOR "nvim"
  SUDO_EDITOR "nvim"

  // ANSIBLE
  ANSIBLE_HOME "/home/shadow/.config/ansible"
  ANSIBLE_CONFIG "/home/shadow/.config/ansible.cfg"
  ANSIBLE_GALAXY_CACHE_DIR "/home/shadow/.cache/ansible/galaxy_cache"

  // GRADLE
  GRADLE_USER_HOME "/home/shadow/.local/share/gradle"

  // MAVEN
  MAVEN_OPTS "-Dmaven.repo.local=/home/shadow/.local/share/maven/repository"



  // DEFAULT APPLICATIONS
  BROWSER "zen-browser"
  TERMINAL "foot"
  MENU "rofi"
  NOTES_MANAGER "obsidian"
  FILE_MANAGER "thunar"
}


spawn-sh-at-startup "niri msg action focus-workspace 3"
spawn-sh-at-startup "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
spawn-sh-at-startup "swww-daemon > /dev/null 2>&1"
spawn-sh-at-startup "uwsm app -- mako"
spawn-sh-at-startup "uwsm app -- $BROWSER"
spawn-sh-at-startup "uwsm app -- $TERMINAL --title='foot.fullscreen'"
spawn-sh-at-startup "cliphist wipe"
spawn-sh-at-startup "wl-paste --watch cliphist store"

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// This line starts waybar, a commonly used bar for Wayland compositors.
// spawn-at-startup "waybar"

// To run a shell command (with variables, pipes, etc.), use spawn-sh-at-startup:
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/screenshots/SS_%Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    slowdown 0.7
}

// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)


window-rule {
    match app-id="^AlacrittyFullScreen$" title="^Alacritty$"
    match app-id="^com\\.ghostty\\.fullscreen$"
    match title="^foot\\.fullscreen$"
    match app-id="^zen$"

    open-floating false
    open-maximized true
}


window-rule {
    match app-id="^Alacritty$" title="^Alacritty$"

    match app-id="^com\\.mitchellh\\.ghostty$"
    match app-id="^com\\.ghostty\\.transparent$"

    match app-id="^foot$"
    exclude title="^foot\\.fullscreen$"

    match app-id="^blueberry\\.py$" title="^Bluetooth$"

    match title="Network Manager"

    open-floating true
    border {
        width 2
        active-color "#a6e3a1"
    }
    geometry-corner-radius 10
}

window-rule {
    match app-id="^com\\.ghostty\\.transparent$"
    opacity 0.6
}


window-rule {
  match is-focused=false
  opacity 0.9
}

// Picture-in-Picture
window-rule {
    match title="^Picture-in-Picture$"
    open-floating true
    open-focused false
    default-column-width { fixed 650; }
    default-window-height { fixed 368; }
    default-floating-position x=16 y=16 relative-to="bottom-right"
    border {
        width 2
    }
    geometry-corner-radius 10
}

// Show Me The Key
window-rule {
    match app-id="^showmethekey-gtk$"
    open-floating true
    open-focused false
    opacity 1.0
    default-column-width { fixed 330; }
    default-window-height { fixed 180; }
    default-floating-position x=16 y=65 relative-to="bottom-right"
    border {
        width 2
    }
    geometry-corner-radius 10
}

window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

binds {
  Mod+Shift+Slash { show-hotkey-overlay; }
  // ================================
  // APPLICATION LAUNCHERS
  // ================================
  Mod+Space { spawn "vicinae"; }
  Mod+A { spawn-sh "$MENU -show drun"; }
  Mod+B { spawn-sh "$BROWSER"; }
  Mod+E { spawn-sh "$FILE_MANAGER"; }
  Mod+N { spawn-sh "$NOTES_MANAGER"; }
  Mod+T { spawn-sh "$TERMINAL --title=foot.fullscreen"; }

  // ================================
  // WINDOW MANAGEMENT
  // ================================
  Mod+O { toggle-overview; }
  Mod+Q repeat=false { close-window; }
  Mod+F { maximize-column; }
  // Mod+P { pin-window; }
  Mod+Shift+E { quit; }

  // Move focus
  Mod+Left { focus-column-left; }
  Mod+Right { focus-column-right; }
  Mod+Up { focus-workspace-up; }
  Mod+Down { focus-workspace-down; }
  Mod+H { focus-column-left; }
  Mod+L { focus-column-right; }
  Mod+K { focus-workspace-up; }
  Mod+J { focus-workspace-down; }

  // Switch workspaces
  Mod+1 { focus-workspace 1; }
  Mod+2 { focus-workspace 2; }
  Mod+3 { focus-workspace 3; }
  Mod+4 { focus-workspace 4; }
  Mod+5 { focus-workspace 5; }
  Mod+6 { focus-workspace 6; }
  Mod+7 { focus-workspace 7; }
  Mod+8 { focus-workspace 8; }
  Mod+9 { focus-workspace 9; }
  Mod+0 { focus-workspace 10; }

  // Move window to workspace
  Mod+Shift+1 { move-window-to-workspace 1; }
  Mod+Shift+2 { move-window-to-workspace 2; }
  Mod+Shift+3 { move-window-to-workspace 3; }
  Mod+Shift+4 { move-window-to-workspace 4; }
  Mod+Shift+5 { move-window-to-workspace 5; }
  Mod+Shift+6 { move-window-to-workspace 6; }
  Mod+Shift+7 { move-window-to-workspace 7; }
  Mod+Shift+8 { move-window-to-workspace 8; }
  Mod+Shift+9 { move-window-to-workspace 9; }
  Mod+Shift+0 { move-window-to-workspace 10; }

  // Resize active window
  // Niri uses resize-* actions; approximate Hyprland expand left = resize-left grow,
  // shrink left = resize-left shrink
  Mod+Minus { set-column-width "-7%"; }  // - key (code:20)
  Mod+Equal { set-column-width "+7%"; }  // = key (code:21)

  // Scroll through workspaces with mouse wheel
  // TODO:
  // Mod+WheelDown { focus-workspace-next; }
  // Mod+WheelUp { focus-workspace-prev; }

  // Move/resize windows with mouse drag (must use special mouse binding syntax)
  // TODO:
  // Mod+MouseLeft { drag-window; }
  // Mod+MouseRight { resize-window; }

  // ================================
  // WALLPAPER
  // ================================
  Mod+I {
    spawn-sh "swww img --resize=fit --transition-fps=60 --transition-step=255 --transition-type any $(fd . -e jpg -e jpeg -e png -e gif -e webp -e bmp -e tiff -e tga -e pnm -e avif --type f --follow $HOME/Pictures/wallpapers | shuf -n1)";
  }

  // ================================
  // SYSTEM CONTROLS
  // ================================
  XF86AudioRaiseVolume { spawn-sh "$HOME/.local/bin/volume_controller.sh 2%+"; }
  XF86AudioLowerVolume { spawn-sh "$HOME/.local/bin/volume_controller.sh 2%-"; }
  XF86AudioMute { spawn-sh "$HOME/.local/bin/volume_controller.sh toggle"; }

  XF86MonBrightnessUp { spawn-sh "$HOME/.local/bin/brightness_controller.sh 2%+"; }
  XF86MonBrightnessDown { spawn-sh "$HOME/.local/bin/brightness_controller.sh 2%-"; }

  // ================================
  // SCREENSHOTS
  // ================================
  Print { screenshot; }
  Mod+Print { screenshot-screen; }
  Alt+Print { screenshot-window; }

  // ================================
  // UTILITIES
  // ================================
  Mod+S { spawn-sh "curl -F\"file=@$(fd . $HOME -H -E .local -E .cache -E .cargo -E .npm -E .ssh -E .mozilla -t f | rofi -dmenu -i)\" -Fexpires=240 0x0.st | wl-copy"; }
  Mod+V { spawn-sh "cliphist list | rofi -dmenu | cliphist decode | wl-copy"; }
  Mod+W { spawn-sh "pgrep -x waybar >/dev/null && pkill -x waybar || waybar &"; }
  Mod+Alt+K { spawn-sh "$HOME/.local/bin/toggle_keyd.sh && notify-send 'Keyboard layout toggled'"; }
}

